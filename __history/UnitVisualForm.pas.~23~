unit UnitVisualForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, UnitTGraphModel, UnitTGraphView, UnitTypes,
  Math, System.Actions, Vcl.ActnList, Vcl.PlatformDefaultStyleActnCtrls,
  Vcl.ActnPopup, Vcl.Menus;

type
  TFrmVisual = class(TForm)
    PaintBoxMain: TPaintBox;
    PopupMenuVertexSelected: TPopupMenu;
    PopupMenuEdgeSelected: TPopupMenu;
    PopupMenuNothingSelected: TPopupMenu;
    AddEdge1: TMenuItem;
    RemoveEdge1: TMenuItem;
    ActionListVertexSelected: TActionList;
    PopupActionBar1: TPopupActionBar;
    ActionAddEdge: TAction;
    procedure FormCreate(Sender: TObject);
    procedure PaintBoxMainMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure PaintBoxMainDblClick(Sender: TObject);
    procedure PaintBoxMainPaint(Sender: TObject);
    procedure PaintBoxMainClick(Sender: TObject);
    procedure PaintBoxMainMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure PaintBoxMainMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
  end;

var
  FrmVisual: TFrmVisual;

implementation

{$R *.dfm}

type
   TWhatIsPressed = (PressedNothing, PressedField, PressedSingleVertex, PressedSingleVertexToCreateEdge,
      PressedSeveralVertexes, PressedSingleEdge, PressedSeveralEdges,
      PressedSomeText, PressedMultiselect);
   TMouseButtonPressed = (MBPNone, MBPLeft, MBPRight, MBPCenter);

var
  GraphModel: TGraphModel;
  GraphView: TGraphView;
  MousePosition: TPoint;
  MouseButtonPressed: TMouseButtonPressed;
  WhatIsPressed: TWhatIsPressed;

{ TFrmVisual }

procedure TFrmVisual.FormCreate(Sender: TObject);
begin
   GraphModel:= TGraphModel.Create;
   GraphView:= TGraphView.Create;
   MouseButtonPressed:= MBPNone;
   WhatIsPressed:= PressedNothing;
end;

procedure TFrmVisual.PaintBoxMainClick(Sender: TObject);
begin
{
   with GraphView do
      if FVertexUnderMousePointer <> nil then
      begin
         WhatIsPressed:= PressedSingleVertex;
         //ShowMessage('Vertex is clicked');
      end
      else if FEdgeUnderMousePointer <> nil then
      begin
         WhatIsPressed:= PressedSingleVertex
      end
      else
      begin
         WhatIsPressed:= PressedField;
//         ShowMessage('Field is clicked');

      end;     }
{
   with GraphView do
      if (FEdgeUnderMousePointer = nil) and (FVertexUnderMousePointer = nil) then
      begin
//         ShowMessage('It will move canvas, or start multiselect based on selected.');
         ResetSelection;
      end
      else
         FVertexUnderMousePointer^.FIsSelected:= True;
 }
end;

procedure TFrmVisual.PaintBoxMainDblClick(Sender: TObject);
begin
   with GraphView do
      case WhatIsPressed of
         PressedNothing:
            with GraphModel.CreateNewVertexModel^ do
               CreateNewVertexView(FIndex, MousePosition,
                  TPoint.Create(10, 10), FName, True);
         PressedSingleVertex:
            ShowMessage('There would be window with editing of vertex with index ' +
               IntToStr(FVertexUnderMousePointer^.FIndex));
      end;
   PaintBoxMainPaint(Sender);
end;

procedure TFrmVisual.PaintBoxMainMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
   MouseButtonPressed:= TMouseButtonPressed(Byte(Button) + 1);
   with GraphView do
      if FVertexUnderMousePointer <> nil then
      begin
         WhatIsPressed:= PressedSingleVertex;
         //ShowMessage('Vertex is clicked');
         FVertexUnderMousePointer^.FIsSelected:= True;
         if (Button = mbRight) and (GetSelectedVertexesViewPointers[0] <> FVertexUnderMousePointer) then
            WhatIsPressed:= PressedSingleVertexToCreateEdge;
      end
      else if FEdgeUnderMousePointer <> nil then
      begin
         GraphView.ResetSelection;
         WhatIsPressed:= PressedSingleVertex;
         FEdgeUnderMousePointer^.FIsSelected:= True;
      end
      else
      begin
         GraphView.ResetSelection;
         WhatIsPressed:= PressedField;
//         ShowMessage('Field is clicked');
      end;
      PaintBoxMainPaint(Sender);
end;

procedure TFrmVisual.PaintBoxMainMouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
var
   i: Integer;
begin
   { TODO -cMouseValidation: make a fich with checking of shift and left/middle buttons }
   MousePosition.SetLocation(X, Y);
   with GraphView do
   begin
      case WhatIsPressed of
         PressedNothing: begin
            FVertexUnderMousePointer:= IsPointOnVertex(MousePosition);
            FEdgeUnderMousePointer:= IsPointOnEdge(MousePosition);
            FrmVisual.Cursor:= crDefault;
            if FVertexUnderMousePointer <> nil then
               FrmVisual.Cursor:= crSize
            else if FEdgeUnderMousePointer <> nil then
               FrmVisual.Cursor:= crHandPoint;
         end;
         PressedSingleVertex: begin
            FVertexUnderMousePointer^.FPosition:= MousePosition;
         end;
      end;
   end;
   PaintBoxMainPaint(Sender);
end;

procedure TFrmVisual.PaintBoxMainMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
   MouseButtonPressed:= MBPNone;
   WhatIsPressed:= PressedNothing;
end;

procedure TFrmVisual.PaintBoxMainPaint(Sender: TObject);
var
   VVPointers: TVertexesViewPointers;
   EVPointers: TEdgesViewPointers;
   i: Integer;
   Point1, Point2: TPoint;
begin
   //if GraphView.FNeedToRedraw then
   begin
      with PaintBoxMain.Canvas do
      begin
         Brush.Color:= clWhite;
         FloodFill(0, 0, RGB(Random(256), Random(256), Random(256)), fsBorder);
         Pen.Color:= clBlack;

         EVPointers:= GraphView.GetEdgesViewPointers;
         for i := 0 to High(EVPointers) do
            with EVPointers[i]^ do
            begin
               if FIsSelected then
                  Pen.Color:= clRed
               else
                  Pen.Color:= clBLue;
               Pen.Width:= 5;
               PenPos.SetLocation(FPStartVertexView^.FPosition);
               LineTo(FPEndVertexView^.FPosition.X, FPEndVertexView^.FPosition.Y);
            end;

         VVPointers:= GraphView.GetVertexesViewPointers;
         for i := 0 to High(VVPointers) do
            with VVPointers[i]^ do
            begin
               Point1:= FPosition.Subtract(FHalfOfSize);
               Point2:= FPosition.Add(FHalfOfSize);
               if FIsSelected then
                  Brush.Color:= clRed
               else
                  Brush.Color:= clBlue;
               Pen.Color:= clBlack;
               Pen.Width:= 1;
               Ellipse(Point1.X, Point1.y, Point2.X, Point2.Y);
               //Point1:= Point1.Subtract(TPoint.Create(0, 15)); // 5 - text height
               Point1:= FPosition.Subtract(TPoint.Create(3, 6));
               Font.Color:= clWhite;
               TextOut(Point1.X, Point1.Y, FName);
            end;
      end;
      GraphView.FNeedToRedraw:= False;
   end;   { TODO -cIMPORTANT: stoped here }

end;

end.
